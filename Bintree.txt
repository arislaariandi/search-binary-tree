package binary_tree_search;

public class BinTree {

    Node root;
    int k;

    private boolean isEmpty() {
        return (root == null);
    }

    public void insert(int data) {
        root = insert(root, data);

    }

    private Node insert(Node node, int data) {

        if (node == null) {
            node = new Node(data);
        } else {
            if (data <= node.data) {
                node.left = insert(node.left, data);
            } else {
                node.right = insert(node.right, data);
            }
        }

        return node;
    }

    public int getLeafCount() {
        return getLeafCount(root);
    }

    public int getLeafCount(Node node) {

        if (node == null) {
            return 0;
        }
        if (node.left == null && node.right == null) {
            return 1;
        } else {
            return getLeafCount(node.left) + getLeafCount(node.right);
        }
    }

    void printPaths(Node node) {
        int path[] = new int[1000];
        printPathsRecur(node, path, 0);
    }

    void printPathsRecur(Node node, int path[], int pathLen) {
        if (node == null) {
            return;
        }

        path[pathLen] = node.data;
        pathLen++;

        if (node.left == null && node.right == null) {
            printArray(path, pathLen);
        } else {
            printPathsRecur(node.left, path, pathLen);
            printPathsRecur(node.right, path, pathLen);
        }
    }

    void printArray(int ints[], int len) {
        int i;
        for (i = 0; i < len; i++) {
            System.out.print("-> " + ints[i] + " ");
        }
        System.out.println("");
    }

    public void searchPaths(int x) {
        searchGet(root, x);
    }

    public void searchGet(Node root, int x) {
        if (root.getData() < x) {
            System.out.print(root.getData() + " ");
            searchGet(root.getRight(), x);
        } else if (root.getData() > x) {
            System.out.print(root.getData() + " ");
            searchGet(root.getLeft(), x);
        } else if (root.getData() == x) {
            System.out.print(root.getData() + " ");
        } else if (root.getData() == k) {
            System.out.print(" Data tidak ada ");
        }

    }

    public void delete(int k) {
        if (isEmpty()) {
            System.out.println("Maaf Data Kosong");
        } else if (search(k) == false) {
            System.out.println("Sorry " + k + " Tidak  Ada");
        } else {
            root = delete(root, k);
            System.out.println(k + " Terhapus dari tree");
        }
    }

    private Node delete(Node root, int k) {
        Node p, p2, n;
        if (root.getData() == k) {
            Node lt, rt;
            lt = root.getLeft();
            rt = root.getRight();
            if (lt == null && rt == null) {
                return null;
            } else if (lt == null) {
                p = rt;
                return p;
            } else if (rt == null) {
                p = lt;
                return p;
            } else {
                p2 = rt;
                p = rt;
                while (p.getLeft() != null) {
                    p = p.getLeft();
                }
                p.setLeft(lt);
                return p2;
            }
        }
        if (k < root.getData()) {
            n = delete(root.getLeft(), k);
            root.setLeft(n);
        } else {
            n = delete(root.getRight(), k);
            root.setRight(n);
        }
        return root;
    }

    private boolean search(int k) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
